<!--
$RCSfile: build.xml,v $


Copyright (c) 2005 Sun Microsystems, Inc. All  Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met: 

- Redistribution of source code must retain the above copyright 
  notice, this  list of conditions and the following disclaimer.

- Redistribution in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in 
  the documentation and/or other materials provided with the
  distribution.

Neither the name of Sun Microsystems, Inc. or the names of 
contributors may be used to endorse or promote products derived 
from this software without specific prior written permission.

This software is provided "AS IS," without a warranty of any 
kind. ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND 
WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, ARE HEREBY
EXCLUDED. SUN MIDROSYSTEMS, INC. ("SUN") AND ITS LICENSORS SHALL 
NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF 
USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS
DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE FOR 
ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL,
CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND
REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF OR
INABILITY TO USE THIS SOFTWARE, EVEN IF SUN HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES. 

You acknowledge that this software is not designed or intended for 
use in the design, construction, operation or maintenance of any 
nuclear facility. 

$Revision: 1.1 $
$Date: 2005-02-11 05:01:13 $
$State: Exp $
-->
<project name="jai_imageio" default="jar" basedir=".">
  <description>
    This project builds Java Advanced Imaging Image I/O Tools.

    The build requires that Java Advanced Imaging (JAI) either be installed
    in the J2SDK used for the build or that jai_core.jar be on the CLASSPATH.

    The environment variable CLIB_DIR may be used via the ant "-D" command
    line option to specify the directory containing clibwrapper_jiio.jar;
    the default value is src/share/jclib4jai/lib.

    Class files are compiled into build/${platform}/debug/classes or
    build/${platform}/opt/classes.

    Jar files are created in build/${platform}/debug/lib/ext or
    build/${platform}/opt/lib/ext.

    Native libraries are copied to build/${platform}/debug/bin or
    build/${platform}/opt/bin on Windows and
    build/${platform}/debug/lib/${arch} or
    build/${platform}/opt/lib/${arch} on all other platforms.

    Javadoc is created in build/${platform}/javadocs/docs-jcp,
    build/${platform}/javadocs/docs-private, or
    build/${platform}/javadocs/docs-public depending on the access type.

    The distribution lib bundle is created in dist/${platform}/lib.

    The distribution javadoc bundle is created in dist/${platform}/javadocs.
  </description>

  <!-- Set global version properties for this build -->

  <!-- Version strings -->
  <property name="verspec" value="1.0-mr"/>
  <property name="verimpl" value="1.0_01"/>

  <!-- Version strings as used in file names -->
  <property name="verspecfile" value="1_0-mr"/>
  <property name="verimplfile" value="1_0_01"/>

  <!-- Javadoc properties -->
  <property name="packageListLoc" value="build-tools"/>
  <property name="docurl" value="http://java.sun.com/j2se/1.4.2/docs/api"/>

  <!-- Other global properties -->
  <property name="src"     value="src/share/classes"/>
  <property name="build"   value="build"/>
  <property name="dist"    value="dist"/>
  <property name="textdir" value="."/>
  <property name="pkgname" value="jai_imageio-${verimplfile}-lib"/>
  <property name="docname" value="jai_imageio-${verspecfile}-doc"/>

  <!-- Sets a single property depending on the type of current platform. -->
  <target name="determinePlatform">
    <condition property="isLinuxOnX86">
        <os name="linux" arch="i386"/>
    </condition>

    <condition property="isSolarisOnSparc">
        <os name="SunOS" arch="sparc"/>
    </condition>   

    <condition property="isSolarisOnX86">
        <os name="SunOS" arch="x86"/>
    </condition>   

    <condition property="isWindowsOnX86">
	<os family="windows" arch="x86"/>
    </condition>
  </target>

  <target name="setupLinuxX86" if="isLinuxOnX86">	
    <property name="ostype" value="linux"/>
    <property name="platform" value="linux-i586"/>
    <property name="arch" value="i386"/>
    <property name="clibarch" value="linux"/>
    <property name="jrenativesubdir" value="lib/${arch}"/>
  </target>

  <target name="setupSolarisSparc" if="isSolarisOnSparc">	
    <property name="ostype" value="solaris"/>
    <property name="platform" value="solaris-sparc"/>
    <property name="arch" value="sparc"/>
    <property name="clibarch" value="sparc"/>
    <property name="jrenativesubdir" value="lib/${arch}"/>
  </target>

  <target name="setupSolarisX86" if="isSolarisOnX86">	
    <property name="ostype" value="solaris"/>
    <property name="platform" value="solaris-i586"/>
    <property name="arch" value="i386"/>
    <property name="clibarch" value="i386"/>
    <property name="jrenativesubdir" value="lib/${arch}"/>
  </target>

  <target name="setupWindows" if="isWindowsOnX86">	
    <property name="ostype" value="windows"/>
    <property name="platform" value="windows-i586"/>
    <property name="arch" value="i386"/>
    <property name="clibarch" value="win32"/>
    <property name="jrenativesubdir" value="bin"/>
  </target>

  <!-- Set properties as a function of the type of platform. -->
  <target name="setupPlatform"
	  depends="determinePlatform,
		   setupLinuxX86,
		   setupSolarisSparc,
		   setupSolarisX86,
		   setupWindows">
  </target>

  <!-- Sets "clib" property to "CLIB_DIR" environment variable. -->
  <target name="clib-env" if="CLIB_DIR">
    <property name="clib" value="${CLIB_DIR}"/>
  </target>

  <!-- Sets "clib" property to default value. -->
  <target name="clib-def" unless="CLIB_DIR">
    <property name="clib" value="src/share/jclib4jai/lib"/>
  </target>

  <!-- Sets "clib" property. -->
  <target name="clib-property" depends="clib-env,clib-def"/>

  <!-- Sets the platform-dependent properties, the "clib" property,
       and the time stamps. -->
  <target name="init" depends="setupPlatform,clib-property">
    <!-- Create the time stamp -->
    <tstamp>
      <!-- Set time stamp properties -->
      <format property="datestamp" pattern="yyyy.MM.dd"/>
      <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss.SZ"/>
      <format property="filestamp" pattern="yyyy_MM_dd_HH_mm_ss"/>
    </tstamp>
  </target>

  <target name="echo" depends="setupPlatform,clib-property"
	  description="Prints the values of pertinent properties.">
    <echo message="os.arch         = ${os.arch}"/>
    <echo message="os.name         = ${os.name}"/>	
    <echo message="ant.home        = ${ant.home}"/>
    <echo message="java.home       = ${java.home}"/>
    <echo message="user.name       = ${user.name}"/>
    <echo message="user.home       = ${user.home}"/>

    <echo message=""/>

    <echo message="platform        = ${platform}"/>
    <echo message="ostype          = ${ostype}"/>
    <echo message="arch            = ${arch}"/>
    <echo message="clibarch        = ${clibarch}"/>
    <echo message="jrenativesubdir = ${jrenativesubdir}"/>

    <echo message=""/>

    <echo message="verspec         = ${verspec}"/>
    <echo message="verimpl         = ${verimpl}"/>
    <echo message="verspecfile     = ${verspecfile}"/>
    <echo message="verimplfile     = ${verimplfile}"/>

    <echo message=""/>

    <echo message="src             = ${src}"/>
    <echo message="clib            = ${clib}"/>
    <echo message="textdir         = ${textdir}"/>
    <echo message="packageListLoc  = ${packageListLoc}"/>
    <echo message="docurl          = ${docurl}"/>
    <echo message="proxyhost       = ${proxyhost}"/>
    <echo message="proxyport       = ${proxyport}"/>
    <echo message="build           = ${build}"/>
    <echo message="dist            = ${dist}"/>
    <echo message="pkgname         = ${pkgname}"/>
    <echo message="docname         = ${docname}"/>
  </target>

  <!-- Sets compilation mode dependent properties to debug values and
       invokes the target named "${targetname}". -->
  <target name="do-debug" depends="init">
    <property name="debugsetting" value="true"/>
    <property name="debugoroptsubdir" value="debug"/>
    <property name="builddir"
	      value="${build}/${platform}/${debugoroptsubdir}"/>
    <property name="classdir"
	      value="${builddir}/classes"/>
    <property name="jardir"
	      value="${builddir}/lib/ext"/>
    <property name="libdir"
	      value="${builddir}/${jrenativesubdir}"/>

    <antcall target="${targetname}"/>
  </target>

  <!-- Sets compilation mode dependent properties to non-debug values and
       invokes the target named "${targetname}". -->
  <target name="do-opt" depends="init">
    <property name="debugsetting" value="off"/>
    <property name="debugoroptsubdir" value="opt"/>
    <property name="builddir"
	      value="${build}/${platform}/${debugoroptsubdir}"/>
    <property name="classdir"
	      value="${builddir}/classes"/>
    <property name="jardir"
	      value="${builddir}/lib/ext"/>
    <property name="libdir"
	      value="${builddir}/${jrenativesubdir}"/>

    <antcall target="${targetname}"/>
  </target>

  <!-- Invokes "do-debug" target with target "${targetname}". -->
  <target name="debugcall">
    <antcall target="do-debug">
      <param name="targetname" value="${targetname}"/>
    </antcall>
  </target>

  <!-- Invokes "do-opt" target with target "${targetname}". -->
  <target name="optcall">
    <antcall target="do-opt">
      <param name="targetname" value="${targetname}"/>
    </antcall>
  </target>

  <!-- Copies codecLib debug mode files. -->
  <target name="clib-debug">
    <antcall target="debugcall">
      <param name="targetname" value="clib"/>
    </antcall>
  </target>

  <!-- Copies codecLib non-debug mode files. -->
  <target name="clib-opt">
    <antcall target="optcall">
      <param name="targetname" value="clib"/>
    </antcall>
  </target>

  <!-- Copies codecLib files. -->
  <target name="clib">
    <!-- Copy the codecLib jar file -->
    <copy file="${clib}/clibwrapper_jiio.jar" todir="${jardir}"/>

    <!-- Copy the codecLib native libraries -->
    <copy todir="${libdir}">
        <fileset dir="${clib}/${clibarch}" includes="**"/>
    </copy>
  </target>

  <target name="compile" depends="init"
	  description="Executes targets compile-debug and compile-opt.">
    <!-- Create the class file directory -->
    <mkdir dir="${classdir}"/>

    <!-- Copy the text files -->
    <copy todir="${builddir}">
      <fileset dir="${textdir}"
	       includes="COPYRIGHT.txt,
			 LICENSE.txt,
			 LICENSE-codecLibJIIO.txt"/>
    </copy>

    <!-- Compile the java code from ${src} into ${classdir} -->
    <javac sourcepath="" srcdir="${src}"
           destdir="${classdir}"
           classpath="${clib}/clibwrapper_jiio.jar"
           debug="${debugsetting}"
           deprecation="off">
      <exclude name="**/com/sun/media/jai/test/*.java"/>
    </javac>

    <!-- Copy the I18N property files while retaining package location -->
    <copy todir="${classdir}">
        <fileset dir="${src}" includes="**/properties"/>
    </copy>
  </target>

  <target name="compile-debug" depends="init,clib-debug"
	  description="Builds all classes with debug compilation.">
    <antcall target="debugcall">
      <param name="targetname" value="compile"/>
    </antcall>
  </target>

  <target name="compile-opt" depends="init,clib-opt"
	  description="Builds all classes with non-debug compilation.">
    <antcall target="optcall">
      <param name="targetname" value="compile"/>
    </antcall>
  </target>

  <!-- Generic manifest file. -->
  <target name="manifest">
    <!-- Create the Manifest file -->
    <manifest file="${builddir}/Manifest">
      <attribute name="Specification-Title"
                 value="Java Advanced Imaging Image I/O Tools"/>
      <attribute name="Specification-Version"
                 value="${verspec}"/>
      <attribute name="Specification-Vendor"
                 value="Sun Microsystems, Inc."/>
      <attribute name="Implementation-Title"
                 value="com.sun.media.imageio"/>
      <attribute name="Implementation-Version"
                 value="${verimpl}"/> 
      <attribute name="Implementation-Vendor"
                 value="Sun Microsystems, Inc."/>
      <attribute name="Extension-Name"
                 value="com.sun.media.imageio"/>
      <attribute name="Sealed" value="true"/>
    </manifest>
  </target>

  <!-- Create jai_core.jar. -->
  <target name="jar-core" depends="compile,manifest">
    <jar jarfile="${jardir}/jai_imageio.jar"
         manifest="${builddir}/Manifest" update="yes">
	<fileset dir="${classdir}"/>
	<metainf dir="src/share" prefix="META-INF" includes="services/*"/>
    </jar>
  </target>

  <target name="jar-debug" depends="compile-debug"
	  description="Creates jar files from debug compiled class files.">
    <antcall target="debugcall">
      <param name="targetname" value="jar-core"/>
    </antcall>
  </target>

  <target name="jar-opt" depends="compile-opt"
	  description="Creates jar files from non-debug compiled class files.">
    <antcall target="optcall">
      <param name="targetname" value="jar-core"/>
    </antcall>
  </target>

  <target name="jar" depends="jar-debug,jar-opt"
	  description="Executes targets jar-debug and jar-opt."/>

  <!-- Generic doc target. Requires "docacccess" and "docsubdir"
       properties to be set. -->
  <target name="builddoc" depends="init">
    <property name="docbuilddir"
	      value="${build}/${platform}/javadocs/${docsubdir}"/>

    <!-- Create the build directory structure used by builddoc -->
    <mkdir dir="${docbuilddir}"/>

    <!-- Copy the license file -->
    <copy file="${textdir}/LICENSE.txt"
	  todir="${docbuilddir}"/>

    <!-- Copy the license file -->
    <copy file="${textdir}/COPYRIGHT.txt"
	  todir="${docbuilddir}"/>

    <!-- Compile the javadoc from ${src} into ${docbuilddir} -->
    <!-- NOTE: Cannot just list packages which exist in J2SE or in
	 linked packages like JAI because the javadoc will be built
	 by Ant for those packages. Instead in those cases the source
	 files must be listed explicitly below. -->
    <javadoc sourcepath="${src}"
	     access="${docaccess}"
	     packagenames="com.sun.media.imageio.*,
                           com.sun.media.jai.operator.*"
	     maxmemory="128m"
             destdir="${docbuilddir}"
             windowtitle="Java Advanced Imaging Image I/O Tools ${verspecfile}"
             overview="${src}/overview.html">
      <link offline="true"
	    href="${docurl}"
	    packagelistLoc="${packageListLoc}"/>
    </javadoc>
  </target>

  <target name="docs-jcp"
	  description="Builds javadoc with JCP (protected) access.">
    <antcall target="builddoc">
      <param name="docaccess" value="protected"/>
      <param name="docsubdir" value="docs-jcp"/>
    </antcall>
  </target>

  <target name="docs-private"
	  description="Builds javadoc with private access.">
    <antcall target="builddoc">
      <param name="docaccess" value="private"/>
      <param name="docsubdir" value="docs-private"/>
    </antcall>
  </target>

  <target name="docs-public"
	  description="Builds javadoc with public access.">
    <antcall target="builddoc">
      <param name="docaccess" value="public"/>
      <param name="docsubdir" value="docs-public"/>
    </antcall>
  </target>

  <target name="docs" depends="docs-jcp,docs-private,docs-public"
	  description="Builds javadoc for all access types."/>

  <target name="dist" depends="init,docs-jcp,jar-opt"
	  description="Creates the lib and javadoc distribution zip files.">
    <property name="distdir" value="${dist}/${platform}"/>

    <mkdir dir="${distdir}"/>
    <mkdir dir="${distdir}/javadocs"/>
    <mkdir dir="${distdir}/lib"/>
    
    <!-- Create the lib Zip archive -->
    <zip zipfile="${distdir}/lib/${pkgname}-${platform}-${filestamp}.zip"
	 basedir="${distdir}"
	 filesonly="true">
      <fileset file="${build}/${platform}/opt/COPYRIGHT.txt"/>
      <fileset file="${build}/${platform}/opt/LICENSE.txt"/>
      <fileset file="${build}/${platform}/opt/LICENSE-codecLibJIIO.txt"/>
      <fileset dir="${build}/${platform}/opt"
	       includes="lib/**,bin/**"/>
    </zip>

    <!-- Create a Zip doc bundle -->
    <zip zipfile="${distdir}/javadocs/${docname}-${platform}-${filestamp}.zip"
	 basedir="${build}/${platform}/javadocs/docs-jcp"
	 includes="**"
	 filesonly="true"/>
  </target>

  <target name="all" depends="jar-debug,dist"
	  description="Executes targets jar-debug and dist."/>

  <target name="clean" depends="init"
	  description="Deletes entities created by all targets on current platform.">
    <delete dir="${build}/${platform}"/>
    <delete dir="${dist}/${platform}"/>
  </target>

  <target name="clean-all"
	  description="Deletes entities created by all targets on all platforms.">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>

  <target name="clean-dist"
	  description="Deletes distribution subdirectory.">
    <delete dir="${dist}"/>
  </target>
</project>
